"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class joint_target_t(object):
    __slots__ = ["pt", "vt", "iqt", "kp", "kd", "cmd", "period_ms", "robot_id"]

    __typenames__ = ["float", "float", "float", "float", "float", "int16_t", "int32_t", "int64_t"]

    __dimensions__ = [[10], [10], [10], [10], [10], [10], None, None]

    def __init__(self):
        self.pt = [ 0.0 for dim0 in range(10) ]
        self.vt = [ 0.0 for dim0 in range(10) ]
        self.iqt = [ 0.0 for dim0 in range(10) ]
        self.kp = [ 0.0 for dim0 in range(10) ]
        self.kd = [ 0.0 for dim0 in range(10) ]
        self.cmd = [ 0 for dim0 in range(10) ]
        self.period_ms = 0
        self.robot_id = 0

    def encode(self):
        buf = BytesIO()
        buf.write(joint_target_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>10f', *self.pt[:10]))
        buf.write(struct.pack('>10f', *self.vt[:10]))
        buf.write(struct.pack('>10f', *self.iqt[:10]))
        buf.write(struct.pack('>10f', *self.kp[:10]))
        buf.write(struct.pack('>10f', *self.kd[:10]))
        buf.write(struct.pack('>10h', *self.cmd[:10]))
        buf.write(struct.pack(">iq", self.period_ms, self.robot_id))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != joint_target_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return joint_target_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = joint_target_t()
        self.pt = struct.unpack('>10f', buf.read(40))
        self.vt = struct.unpack('>10f', buf.read(40))
        self.iqt = struct.unpack('>10f', buf.read(40))
        self.kp = struct.unpack('>10f', buf.read(40))
        self.kd = struct.unpack('>10f', buf.read(40))
        self.cmd = struct.unpack('>10h', buf.read(20))
        self.period_ms, self.robot_id = struct.unpack(">iq", buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if joint_target_t in parents: return 0
        tmphash = (0x8e9df47c1c9aa26) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if joint_target_t._packed_fingerprint is None:
            joint_target_t._packed_fingerprint = struct.pack(">Q", joint_target_t._get_hash_recursive([]))
        return joint_target_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", joint_target_t._get_packed_fingerprint())[0]

